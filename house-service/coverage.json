{
"/home/wmoulin/dev/js/serviceHouse/dist/js/app-const.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/app-const.ts","statementMap":{"1":{"start":{"line":1,"column":13},"end":{"line":1,"column":30}}},"fnMap":{},"branchMap":{},"s":{"1":0},"b":{},"f":{},"code":"export const DB_KEY = \"my_db\";","l":{"1":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/app.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/app.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":42}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":37}},"6":{"start":{"line":11,"column":0},"end":{"line":12,"column":31}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":52}},"8":{"start":{"line":17,"column":0},"end":{"line":24,"column":3}},"9":{"start":{"line":18,"column":2},"end":{"line":18,"column":26}},"10":{"start":{"line":19,"column":2},"end":{"line":19,"column":47}},"11":{"start":{"line":21,"column":2},"end":{"line":21,"column":32}},"12":{"start":{"line":23,"column":2},"end":{"line":23,"column":13}},"13":{"start":{"line":28,"column":0},"end":{"line":28,"column":40}},"14":{"start":{"line":31,"column":0},"end":{"line":31,"column":66}},"15":{"start":{"line":33,"column":0},"end":{"line":33,"column":59}},"16":{"start":{"line":33,"column":24},"end":{"line":33,"column":56}}},"fnMap":{"1":{"name":"(anonymous_1)","line":17,"loc":{"start":{"line":17,"column":25},"end":{"line":17,"column":41}}}},"branchMap":{},"s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{},"f":{"1":0},"code":"import * as express from \"express\";\nimport * as path from \"path\";\n\nimport { ServiceLoader } from \"threerest\";\n\nimport ServiceTest from \"./services/service-test\";\n\nimport { Injector } from \"./inject/injector\"\nimport { DB_KEY } from \"./app-const\";\n\nvar MongoClient = require('mongodb').MongoClient\n  , assert = require('assert');\n \n// Connection URL \nvar url = 'mongodb://localhost:27017/service-house';\n// Use connect method to connect to the Server \nMongoClient.connect(url, function(err, db) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  Injector.register(DB_KEY, db);\n \n  db.close();\n});\n\n\n\nvar app:express.Application = express(); \n\n// load the service Test \nServiceLoader.loadServices(app, path.join(__dirname, \"services\"));\n\napp.listen(8080, () => {console.log(\"Express start...\");});\n","l":{"1":0,"2":0,"4":0,"8":0,"9":0,"11":0,"15":0,"17":0,"18":0,"19":0,"21":0,"23":0,"28":0,"31":0,"33":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/inject/inject.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/inject/inject.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":59}},"3":{"start":{"line":12,"column":0},"end":{"line":18,"column":1}},"4":{"start":{"line":13,"column":4},"end":{"line":17,"column":6}},"5":{"start":{"line":14,"column":8},"end":{"line":14,"column":132}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":66}},"7":{"start":{"line":16,"column":8},"end":{"line":16,"column":91}}},"fnMap":{"1":{"name":"inject","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":67}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":11},"end":{"line":13,"column":88}}}},"branchMap":{"1":{"line":14,"type":"binary-expr","locations":[{"start":{"line":14,"column":61},"end":{"line":14,"column":125}},{"start":{"line":14,"column":129},"end":{"line":14,"column":131}}]}},"s":{"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"code":"import \"reflect-metadata\";\nimport { Injector, INJECT_METADATA_KEY } from \"./injector\";\nimport { Class, AbstractClass } from \"./typescript-helper\";\n\ndeclare var Reflect: any;\n\n/**\n * Decorateur de paramètre pour l'injecter suivant le côté où le code est ecécuté\n * @param  key {any} clé de stockage\n * @param  side {Side} complément de clé correspondant au côté d'exécution (Client ou Serveur)\n * */\nexport function inject(key:Class<any> | AbstractClass<any> | string) {\n    return function(target: Object, propertyKey: string | symbol, parameterIndex: number) {\n        let injectParameters: {index: number, type: any}[] = Reflect.getOwnMetadata(INJECT_METADATA_KEY, target, propertyKey) || [];\n        injectParameters.push({index: parameterIndex, type: key});\n        Reflect.defineMetadata(INJECT_METADATA_KEY, injectParameters, target, propertyKey);\n    };\n};\n\n\n","l":{"1":0,"2":0,"12":1,"13":0,"14":0,"15":0,"16":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/inject/injectable.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/inject/injectable.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":59}},"3":{"start":{"line":12,"column":0},"end":{"line":33,"column":1}},"4":{"start":{"line":13,"column":4},"end":{"line":32,"column":5}},"5":{"start":{"line":14,"column":8},"end":{"line":14,"column":118}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":41}},"7":{"start":{"line":16,"column":8},"end":{"line":25,"column":9}},"8":{"start":{"line":17,"column":12},"end":{"line":24,"column":14}},"9":{"start":{"line":19,"column":20},"end":{"line":21,"column":23}},"10":{"start":{"line":20,"column":24},"end":{"line":20,"column":131}},"11":{"start":{"line":22,"column":20},"end":{"line":22,"column":35}},"12":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"13":{"start":{"line":28,"column":12},"end":{"line":28,"column":59}},"14":{"start":{"line":31,"column":8},"end":{"line":31,"column":30}},"15":{"start":{"line":35,"column":0},"end":{"line":39,"column":1}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":13}},"17":{"start":{"line":37,"column":4},"end":{"line":37,"column":13}},"18":{"start":{"line":38,"column":4},"end":{"line":38,"column":9}}},"fnMap":{"1":{"name":"injectable","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":96}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":11},"end":{"line":13,"column":69}}},"3":{"name":"(anonymous_3)","line":18,"loc":{"start":{"line":18,"column":16},"end":{"line":18,"column":41}}},"4":{"name":"(anonymous_4)","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":17}}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":16,"column":7}},{"start":{"line":16,"column":8},"end":{"line":16,"column":7}}]},"2":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":78},"end":{"line":20,"column":98}},{"start":{"line":20,"column":102},"end":{"line":20,"column":129}}]},"3":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":7}},{"start":{"line":27,"column":8},"end":{"line":27,"column":7}}]},"4":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":17}},{"start":{"line":35,"column":12},"end":{"line":35,"column":17}}]}},"s":{"1":0,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"code":"import \"reflect-metadata\";\nimport { Injector, INJECT_METADATA_KEY } from \"./injector\";\nimport { Class, AbstractClass } from \"./typescript-helper\";\n\ndeclare var Reflect: any;\n\n/**\n * Decorateur de classe pour l'enregistrer dans l'injecteur que si les côté correspond et permet d'injecter\n * des valeurs dans le constructeur\n * @param  key {any} clé de stockage\n * */\nexport function injectable(key:Class<any> | AbstractClass<any> | string, scope:Scope=Scope.VALUE) {\n    return function <T extends {new(...args:any[]):{}}>(constructor:T) {\n        let injectParameters: {index: number, type: any}[] = Reflect.getOwnMetadata(INJECT_METADATA_KEY, constructor);\n        let newConstructor = constructor;\n        if (injectParameters) {\n            newConstructor = class extends constructor {\n                constructor(...args:any[]) {\n                    injectParameters.forEach((injectParameter) => {\n                        args[injectParameter.index] =  Injector.getRegistered(injectParameter.type || args[injectParameter.index]);\n                    });\n                    super(...args);\n                }\n            };\n        } \n        \n        if (key) {\n            Injector.register(key, newConstructor, scope );\n        }\n\n        return newConstructor;\n    }\n};\n\nexport enum Scope {\n    PROTOTYPE,\n    SINGLETON,\n    VALUE\n};","l":{"1":0,"2":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"19":0,"20":0,"22":0,"27":0,"28":0,"31":0,"35":0,"36":0,"37":0,"38":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/inject/injector.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/inject/injector.ts","statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":37}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"4":{"start":{"line":7,"column":13},"end":{"line":7,"column":54}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":21}},"6":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"7":{"start":{"line":23,"column":12},"end":{"line":23,"column":30}},"8":{"start":{"line":26,"column":8},"end":{"line":26,"column":81}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":21}},"10":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"11":{"start":{"line":37,"column":12},"end":{"line":37,"column":30}},"12":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"13":{"start":{"line":41,"column":12},"end":{"line":41,"column":65}},"14":{"start":{"line":44,"column":8},"end":{"line":44,"column":47}},"15":{"start":{"line":54,"column":8},"end":{"line":54,"column":21}},"16":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"17":{"start":{"line":57,"column":12},"end":{"line":57,"column":30}},"18":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"19":{"start":{"line":61,"column":12},"end":{"line":61,"column":45}},"20":{"start":{"line":64,"column":8},"end":{"line":64,"column":92}},"21":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"22":{"start":{"line":66,"column":12},"end":{"line":66,"column":76}},"23":{"start":{"line":69,"column":8},"end":{"line":69,"column":53}},"24":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"25":{"start":{"line":71,"column":12},"end":{"line":71,"column":49}},"26":{"start":{"line":73,"column":8},"end":{"line":89,"column":9}},"27":{"start":{"line":74,"column":12},"end":{"line":86,"column":13}},"28":{"start":{"line":76,"column":20},"end":{"line":76,"column":60}},"29":{"start":{"line":77,"column":20},"end":{"line":77,"column":26}},"30":{"start":{"line":79,"column":20},"end":{"line":79,"column":66}},"31":{"start":{"line":80,"column":20},"end":{"line":80,"column":26}},"32":{"start":{"line":82,"column":20},"end":{"line":82,"column":50}},"33":{"start":{"line":83,"column":20},"end":{"line":84,"column":81}},"34":{"start":{"line":84,"column":38},"end":{"line":84,"column":57}},"35":{"start":{"line":85,"column":20},"end":{"line":85,"column":26}},"36":{"start":{"line":88,"column":12},"end":{"line":88,"column":61}},"37":{"start":{"line":11,"column":19},"end":{"line":11,"column":55}},"38":{"start":{"line":9,"column":0},"end":{"line":92,"column":1}}},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":24},"end":{"line":18,"column":69}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":27},"end":{"line":33,"column":75}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":19},"end":{"line":52,"column":101}}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":7}},{"start":{"line":22,"column":8},"end":{"line":22,"column":7}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":15},"end":{"line":26,"column":46}},{"start":{"line":26,"column":50},"end":{"line":26,"column":81}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":7}},{"start":{"line":36,"column":8},"end":{"line":36,"column":7}}]},"4":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":7}},{"start":{"line":40,"column":8},"end":{"line":40,"column":7}}]},"5":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":7}},{"start":{"line":56,"column":8},"end":{"line":56,"column":7}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":7}},{"start":{"line":60,"column":8},"end":{"line":60,"column":7}}]},"7":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":25},"end":{"line":64,"column":56}},{"start":{"line":64,"column":60},"end":{"line":64,"column":91}}]},"8":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":7}},{"start":{"line":65,"column":8},"end":{"line":65,"column":7}}]},"9":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":7}},{"start":{"line":70,"column":8},"end":{"line":70,"column":7}}]},"10":{"line":75,"type":"switch","locations":[{"start":{"line":75,"column":16},"end":{"line":77,"column":26}},{"start":{"line":78,"column":16},"end":{"line":80,"column":26}},{"start":{"line":81,"column":16},"end":{"line":85,"column":26}}]}},"s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0]},"f":{"1":0,"2":0,"3":0},"code":"import { Class, AbstractClass } from \"./typescript-helper\";\nimport { Scope } from \"./injectable\";\nimport * as _ from \"lodash\";\n\nconst ID_NAME = \"__injectId__\";\n\nexport const INJECT_METADATA_KEY = \"injectParameters\";\n\nexport class Injector {\n\n    private static registry: {[key: string]: any} = {};\n\n    /**\n     * Retourne la classe enregistrée pour une clé donnée\n     * @param  key {any} clé de stockage\n     * @returns La valeur stockée\n     * */\n    static getRegistered(key:Class<any> | AbstractClass<any> | string): any {\n\n        let id = key;\n        \n        if (!_.isString(key)) {\n            id = key[ID_NAME];\n        }\n        \n        return Injector.registry[id as string] && Injector.registry[id as string]\n    }defineProperty\n\n    /**\n     * Suppression la classe enregistrée pour une clé donnée\n     * @param  key {any} clé de stockage\n     * */\n    static removeRegistered<T>(key:Class<any> | AbstractClass<any> | string): void {\n        let id = key;\n        \n        if (!_.isString(key)) {\n            id = key[ID_NAME];\n        }\n\n        if (!id) {\n            throw new Error(\"No explicit id passed or on key !\");\n        }\n        \n        delete Injector.registry[id as string];\n    }\n\n    /**\n     * Enregistre une classe suivant une clé\n     * @param  key {any} clé de stockageutils\n     * @returns La valeur stockée\n     * */\n    static register(key:Class<any> | AbstractClass<any> | string, value: any, scope:Scope=Scope.VALUE) {\n        \n        let id = key;\n        \n        if (!_.isString(key)) {\n            id = key[ID_NAME];\n        }\n\n        if (!id) {\n            id = key[ID_NAME] = _.uniqueId();\n        }\n        \n        let registered = Injector.registry[id as string] && Injector.registry[id as string];\n        if (registered) {\n            throw new Error(\"Injected value allreay define for this key !\");\n        }\n\n        registered = Injector.registry[id as string];\n        if (!registered) {\n            Injector.registry[id as string] = {};\n        }\n        try {\n            switch(scope) {\n                case Scope.VALUE:\n                    Injector.registry[id as string] = value;\n                    break;\n                case Scope.SINGLETON:\n                    Injector.registry[id as string] = new value();\n                    break;\n                case Scope.PROTOTYPE:\n                    console.log(\"3\", new value());\n                    Object.defineProperty(Injector.registry, id as string, {\n                        get : () => { return new value(); }, configurable: true})\n                    break;\n            }\n        } catch (e) {\n            throw new Error(\"Error on save value to inject\");\n        }\n    }\n\n}","l":{"2":0,"3":0,"5":0,"7":0,"9":0,"11":0,"20":0,"22":0,"23":0,"26":0,"34":0,"36":0,"37":0,"40":0,"41":0,"44":0,"54":0,"56":0,"57":0,"60":0,"61":0,"64":0,"65":0,"66":0,"69":0,"70":0,"71":0,"73":0,"74":0,"76":0,"77":0,"79":0,"80":0,"82":0,"83":0,"84":0,"85":0,"88":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/services/distrib-service.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/services/distrib-service.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":28}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":41}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":41}},"6":{"start":{"line":7,"column":2},"end":{"line":9,"column":3}},"7":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"8":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"9":{"start":{"line":4,"column":21},"end":{"line":20,"column":1}}},"fnMap":{"1":{"name":"(anonymous_2)","line":7,"loc":{"start":{"line":7,"column":8},"end":{"line":null,"column":-1}}},"2":{"name":"(anonymous_3)","line":12,"loc":{"start":{"line":12,"column":10},"end":{"line":12,"column":28}}},"3":{"name":"(anonymous_4)","line":17,"loc":{"start":{"line":17,"column":11},"end":{"line":17,"column":29}}}},"branchMap":{},"s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"code":"import { Service, Methods } from \"threerest\";\n\n@Service.path(\"/distrib\")\nexport default class ServiceTitles {\n\n  @Methods.get(\"\")\n  getAll() {\n    return {\"name\": \"test\"};\n  }\n\n  @Methods.post(\"/:id/lunchs\")\n  addLunch(param:{id:number}) {\n    return {\"name\": \"test\", \"id\": param};\n  }\n\n  @Methods.get(\"/:id/lunchs\")\n  getLunchs(param:{id:number}) {\n    return {\"name\": \"test\", \"id\": param};\n  }\n}\n","l":{"1":0,"4":0,"7":0,"8":0,"12":0,"13":0,"17":0,"18":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/services/message-service.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/services/message-service.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":20,"column":1}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":28}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":41}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":41}},"6":{"start":{"line":7,"column":2},"end":{"line":9,"column":3}},"7":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"8":{"start":{"line":17,"column":2},"end":{"line":19,"column":3}},"9":{"start":{"line":4,"column":21},"end":{"line":20,"column":1}}},"fnMap":{"1":{"name":"(anonymous_2)","line":7,"loc":{"start":{"line":7,"column":8},"end":{"line":null,"column":-1}}},"2":{"name":"(anonymous_3)","line":12,"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":36}}},"3":{"name":"(anonymous_4)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":31}}}},"branchMap":{},"s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"code":"import { Service, Methods } from \"threerest\";\n\n@Service.path(\"/messages\")\nexport default class ServiceTitles {\n\n  @Methods.get(\"\")\n  getAll() {\n    return {\"name\": \"test\"};\n  }\n\n  @Methods.post(\"\")\n  addMessage(param:{message: string}) {\n    return {\"name\": \"test\", \"id\": param};\n  }\n\n  @Methods.post(\"/search\")\n  getMessages(param:{id:number}) {\n    return {\"name\": \"test\", \"id\": param};\n  }\n}\n","l":{"1":0,"4":0,"7":0,"8":0,"12":0,"13":0,"17":0,"18":0}},
"/home/wmoulin/dev/js/serviceHouse/dist/js/services/service-test.ts":{"path":"/home/wmoulin/dev/js/serviceHouse/dist/js/services/service-test.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":15,"column":1}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":28}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":41}},"5":{"start":{"line":7,"column":2},"end":{"line":9,"column":3}},"6":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"7":{"start":{"line":4,"column":21},"end":{"line":15,"column":1}}},"fnMap":{"1":{"name":"(anonymous_2)","line":7,"loc":{"start":{"line":7,"column":8},"end":{"line":null,"column":-1}}},"2":{"name":"(anonymous_3)","line":12,"loc":{"start":{"line":12,"column":7},"end":{"line":12,"column":41}}}},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{},"f":{"1":1,"2":1},"code":"import { Service, Methods } from \"threerest\";\n\n@Service.path(\"/test\")\nexport default class ServiceTitles {\n\n  @Methods.get(\"\")\n  getAll() {\n    return {\"name\": \"test\"};\n  }\n\n  @Methods.get(\"/:id\")\n  getId(param:{id:number, message:string}) {\n    return {\"name\": \"test\", \"id\": param};\n  }\n}\n","l":{"1":1,"4":1,"7":1,"8":1,"12":1,"13":1}}}
